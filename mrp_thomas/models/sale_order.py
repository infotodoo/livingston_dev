#Luis Felipe Paternina
#Ingeniero de Sistemas
#Todoo SAS
from odoo import models, fields, api

class Todoo(models.Model):
    _inherit = 'sale.order'

    prev_order = fields.Char(string="Referencia Orden Anterior")
    nit = fields.Char(string="NIT", related="partner_id.vat")
    elaboration_art_type = fields.Selection([('si','Si'),('no','No')], string="Elaboración de Arte")
    image_elaboration_art = fields.Binary(string="Imagen Elaboración de Arte")
    printing_line_type = fields.Selection([('planas','Planas'),('continuas','Continuas')], string="Línea de Impresión")
    sale_type = fields.Selection([('nacioanl','Nacional'),('extranjero','Extranjero')], string="Venta")
    res_city_id = fields.Many2one('res.city', string="Sede")
    customer_phone = fields.Char(string="Télefono", related="partner_id.phone")
    apply_thomas = fields.Boolean(string="Aplica")
    mrp_kind_of_paper_id = fields.Many2one('mrp.kind.paper', string="Tipo de Papel")
    mrp_document_size_id = fields.Many2one('mrp.document.size', string="Tamaño de Papel")
    number_of_parts = fields.Char(string="Número de Partes")
    design_type = fields.Selection([('arte','Segun Arte'),('muestra','Segun Muestra')], string="Diseño")
    art_supply = fields.Selection([('digital','Digital'),('impresa','Impresa')], string="Suministro de Arte/Muestra")
    number_of_pages = fields.Char(string="Cantidad de Paginas por cada Componente")
    il_apply = fields.Boolean(string="IL Aplica ?")
    mrp_inks_id = fields.Many2one('mrp.inks', string="Tintas para cada componente o Documento")
    mrp_reverse_id = fields.Many2one('mrp.reverse', string="Descripción Reverso")
    mrp_adverse_id = fields.Many2one('mrp.adverse', string="Descripción Anverso")
    ii_apply = fields.Boolean(string="¿II Aplica?")
    mrp_inks_1_id = fields.Many2one('mrp.inks', string="Tintas para cada componente o Documento")
    mrp_adverse_1_id = fields.Many2one('mrp.adverse', string="Descripción Anverso")
    mrp_reverse_1_id = fields.Many2one('mrp.reverse', string="Descripción Reverso")
    mrp_adverse_id = fields.Many2one('mrp.adverse', string="Descripción Anverso")
    mrp_reverse_id = fields.Many2one('mrp.reverse', string="Descripción Reverso")
    pt_apply = fields.Boolean(string="¿PT Aplica?")
    numeration = fields.Boolean(string="Numeración")
    since = fields.Char(string="Desde")
    until = fields.Char(string="Hasta")
    mrp_kind_of_inks_id = fields.Many2one('mrp.inks', string="Clase de Tinta")
    number_of_digits = fields.Char(string="No. Digitos")
    position = fields.Char(string="Posición")
    prefix_type = fields.Selection([('si','Si'),('no','No')], string="Prefijo")
    half_cut_type = fields.Selection([('si','Si'),('no','No')], string="Medio Corte")
    security_die_type = fields.Selection([('si','Si'),('no','No')], string="Troquel de Seguridad")
    stamping_type = fields.Selection([('si','Si'),('no','No')], string="Estampado")
    ribbon_color = fields.Char(string="Color Cinta Estampado")
    design_to_print = fields.Char(string="Diseño a Estampar")
    perforated_type = fields.Selection([('si','Si'),('no','No')], string="Perforado")
    per_apply = fields.Boolean(string="¿PER Aplica?")
    personalization = fields.Selection([('si','Si'),('no','No')], string="Personalización")
    customization_location = fields.Char(string="Ubicación de la Personalización")
    type_of_information = fields.Char(string="Tipo de Información")
    information_processing = fields.Char(string="Procesamiento de la Información")
    type_of_customization = fields.Char(string="Tipo de Personalización")
    customization_numbering = fields.Char(string="Numeración")
    final_presentation = fields.Many2one('mrp.final.presentation', string="Presentación Final")
    packing_form = fields.Many2one('mrp.packing.form', string="Forma de Empaque")
    quantity_package = fields.Char(string="Cantidad por Empaque")
    custody = fields.Selection([('si','Si'),('no','No')], string="Custodia")
    packaging_label = fields.Char(string="Especificación del Rotulo de Empaque")
    customer_to_bill = fields.Char(string="Nombre Cliente a Quien se Factura")
    billable = fields.Selection([('si','Si'),('no','No')], string="Facturable")
    attached_documents = fields.Binary(string="Documentos Anexos Requeridos para Facturar")
    billing_management = fields.Char(string="(Servicio) Contenido y Manejo de la Facturación")
    product_delivery = fields.Many2many('mrp.product.delivery', string="Entrega de Producto")
    costs = fields.Many2many('mrp.costs', string="Costos")
    is_a_test = fields.Boolean(string="Es una Prueba")
    test_name = fields.Char(string="Nombre de la Prueba")
    date_of_application = fields.Date(string="Fecha de Aplicación")
    components = fields.Text(string="Componentes")
    impressions = fields.Text(string="Impresión")
    type_of_service = fields.Text(string="Tipo de Servicio")
    application_sites = fields.Text(string="Sitios de la Aplicación")
    quantity_type_service = fields.Char(string="Cantidad por Tipo de Servicio")
    budgeted_product = fields.Selection([('si','Si'),('no','No')], string="Producto Presupuestado")
    new_product = fields.Selection([('si','Si'),('no','No')], string="Producto Nuevo")
    contract_product = fields.Selection([('si','Si'),('no','No')], string="Producto Por Contrato")
    start_date_thomas = fields.Date(string="Fecha Inicio de Contrato")
    finish_date = fields.Date(string="Fecha de Terminación de Contrato")
    supply_contract = fields.Char(string="Contrato por Suministro o Cantidad")
    check_manufactured_product = fields.Boolean(string="Producto Fabricado")
    product_apply = fields.Boolean(string="Aplica")
    process_apply = fields.Boolean(string="Aplica")
    finishing_processes_apply = fields.Boolean(string="Aplica")
    billing_description_apply = fields.Boolean(string="Aplica")
    logo = fields.Binary(string="Logo", related="company_id.logo")
    width = fields.Char(related="mrp_document_size_id.width")
    heigth = fields.Char(related="mrp_document_size_id.heigth")
    grammage = fields.Char(related="mrp_kind_of_paper_id.grammage")
    is_lottery = fields.Boolean(string="Es una Loteria")
    draw = fields.Char(string="Sorteo")
    fractions_bills = fields.Integer(string="Fracciones por Billetes")
    game_date = fields.Date(string="Fecha de Juego")
    width_fraction_size = fields.Char(string="Ancho")
    heigth_fraction_size = fields.Char(string="Largo")
    number_tickets = fields.Integer(string="Cantidad de Tickets por Rollos")
    number_of_rolls = fields.Integer(string="Numeración de Cajas")
    wide_head_size = fields.Char(string="Ancho")
    heigth_head_size = fields.Char(string="Largo")
    rolls_since = fields.Char(string="Desde")
    rolls_until = fields.Char(string="Al")
    check_thomas_colombia = fields.Boolean(string="Validar Desarrollos Thomas Colombia", compute="_compute_check_company_id")
   
    
    @api.depends('company_id')
    def _compute_check_company_id(self):
        for record in self:
            record.check_thomas_colombia = True if record.company_id and record.company_id[0].name  == 'THOMAS GREG & SONS DE COLOMBIA S.A.' else False




